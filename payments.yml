openapi: 3.0.0
info:
  contact:
    email: pi-commerce@hipay.com
  description: |

    The Gateway API allows you to get paid and manage orders and transactions.

    Please note: this documentation describes the Gateway API parameters and response fields and allows you to test the platform in real time.
    This page is to be used alongside the **[HiPay Enterprise Platform Overview documentation](/getting-started/platform-hipay-enterprise/overview/)**, which gives you more information and details on the HiPay Enterprise workflow. You may use both documents in parallel when integrating HiPay Enterprise.

    # Integration

    Choose from three types of integration to select the one best adapted to your business:

    ## Hosted integration

    HiPay Enterprise hosts your payment page on a secured site. With this option you can benefit from a single point of contact, adaptable payment pages, and the PCI-DSS standard. You can therefore outsource heavy security requirements that are related to payment acceptance.

    In order to use this integration, please refer to the **Generate Hosted Payment Page (`POST /hpayment`)** API service below.

    ## iFrame integration

    This is a hybrid solution in which the buyer remains on your website to make payment. In order to use this integration you need to generate a hosted payment page (as above) with a special template, allowing you to properly display it in an iFrame.

    For more information, please refer to the **Generate Hosted Payment Page (`POST /hpayment`)** documentation below.

    ## Integration via our API

    In this case, the payment page is hosted on your website, allowing you to have a unified, fully customized workflow. Please refer to the **Request New Order API (`POST Order`)** below for more information.

    Please note that if you want to execute transactions with credit or debit card payment products, you will need to tokenize card numbers beforehand by using the HiPay Enterprise Tokenization API.

    # Managing transactions

    Once a transaction is executed, you may need to perform operations on it, such as a refund, a capture, etc. To do so, please refer to the `maintenance` web service.

    You can also get all transaction details at any time by leveraging the `transaction` web services.

    Besides, you may need to be automatically informed when a transaction status gets updated. To this end, you need to leverage server-to-server notifications. For more information, please check the [HiPay Enterprise Overview](/getting-started/platform-hipay-enterprise/overview/#server-to-server-notifications).

    # Web service information

    ## Gateway API base URLs

    | Environment | Base URL |
    | --- | --- |
    | Stage | [https://stage-secure-gateway.hipay-tpp.com/rest/](https://stage-secure-gateway.hipay-tpp.com/rest/) |
    | Production | [https://secure-gateway.hipay-tpp.com/rest/](https://secure-gateway.hipay-tpp.com/rest/) |

    ## Authentication

    All requests to the HiPay Enterprise API require identification through *HTTP Basic Authentication*. Your API credentials can be found in the Integration section of your HiPay Enterprise back office. Most HTTP clients (including web browsers) have built-in support for HTTP basic authentication. If not, the following header must be included in all HTTP requests.

    `Authorization: Basic base64("<API login>:<API password>")`
  title: HiPay Enterprise Gateway API
  version: 1.0.0
servers:
  - description: Stage
    url: 'https://stage-secure-gateway.hipay-tpp.com/rest'
  - description: Production
    url: 'https://secure-gateway.hipay-tpp.com/rest'
tags:
  - name: Payments
    description: Everything you need to create orders and transactions
  - name: Maintenance
    description: Perform operations (capture, refund) on transactions
  - name: Transaction
    description: Request all the details of existing transactions and orders
  - name: payment-products
    description: Get the list of all available Payment products
  - name: security-settings
    description: Get the hash algorithm
paths:
  /v1/hpayment:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forward'
          description: Order successfully created and transaction executed.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request was rejected due to a validation error.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An authentication error occurred/invalid credentials.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access to this resource is fordidden.
      security:
        - basicAuth: []
      tags:
        - Payments
      description: |-
        This service allows you to **redirect your user to a payment page
        (hosted by HiPay)** in order to proceed checkout. This service creates
        an order and returns a forward URL. This forward URL is dedicated to
        display a payment page with your CSS and validated payment products.
        After payment form validation, the checkout is processed and the user is
        being returned to your website.

        According to transaction state and `authentication_indicator` parameter (see below), the user will be redirected either to the accept or the decline page.

        There are two strategies for implementing this service:

        ### Hosted: Full redirection mode

        Once the payment page is created, you redirect your user to it. Your user is redirected back to your website once the transaction si executed.

        ### iFrame mode

        You may also display the payment page in an iFrame, in order to have a unified checkout workflow. To do so, you have to provide the `template` parameter with the value `iframe-js` (see below).
      operationId: generateHostedPaymentPage
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/hpayment'
        description: HPayment information
        required: true
      summary: |-
        Creates a secure payment page to which you can redirect your customer to
        proceed checkout
  '/v1/maintenance/transaction/{transaction_reference}':
    post:
      parameters:
        - description: The unique identifier of the transaction.
          example: '800000420435'
          in: path
          name: transaction_reference
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Operation'
          description: The maintenance operation was executed successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request was rejected due to a validation error.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An authentication error occurred/invalid credentials.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access to this resource is fordidden.
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Transaction was not found.
      security:
        - basicAuth: []
      tags:
        - Maintenance
      description: |-
        Performs a maintenance operation on a given transaction.

        The payment gateway supports the following types of maintenance transactions.

        | Operation Type | Description |
        | --- | --- |
        | `capture` | A request instructing the payment gateway to capture a previously-authorized transaction, i.e. transfer the funds from the customer's bank account to the merchant's bank account. This transaction is always preceded by an authorization. |
        | `refund` | A request instructing the payment gateway to refund a previously captured transaction. A captured transaction can be partly or fully refunded. |
        | `cancel` | A request instructing the payment gateway to cancel a previously authorized transaction. Only authorized transactions can be cancelled, captured transactions must be refunded. |
        | `acceptChallenge` | A request instructing the payment gateway to accept a previously challenged transaction. |
        | `denyChallenge` | A request instructing the payment gateway to deny a previously challenged transaction. |
      operationId: performMaintenanceOperation
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/maintenance'
        description: Maintenance information
        required: true
      summary: Performs a maintenance operation on a given transaction
  /v1/order:
    post:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Order successfully created and transaction executed.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request was rejected due to a validation error.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An authentication error occurred/invalid credentials.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access to this resource is fordidden.
      security:
        - basicAuth: []
      tags:
        - Payments
      description: |-
        This service allows you to execute transactions through API with no need
        to redirect your customer to the payment page hosted by HiPay. This
        service supports payments with credit or debit cards as well as
        alternative payment methods.

        In **order** to make a payment with a credit or debit card, a token must
        have been generated beforehand. In fact, this service cannot receive
        credit or debit card numbers in clear. Instead, you must provide this
        service with a token associated to a card number. Use the HiPay
        Enterprise SDK for JavaScript in order to generate tokens.

        If you need to make payments with alternative payment methods, you can
        use this service directly. Note that the use of some alternative payment
        products implies that you redirect your user to an external URL. In such
        a case, the `forwardUrl` parameter will be set with the appropriate URL.
        Moreover, the activation of *3-D Secure* also implies a redirection of
        your customer.
      operationId: requestNewOrder
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InputOrder'
        description: Order information
        required: true
      summary: Creates an order and a transaction based on payment details
  /v1/transaction:
    get:
      parameters:
        - description: |-
            Merchant unique order id. Return all the transactions related to an
            order id.
          example: ORDER_1487239265080
          in: query
          name: orderid
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Transactionsretrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request was rejected due to a validation error.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An authentication error occurred/invalid credentials.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access to this resource is fordidden.
      security:
        - basicAuth: []
      tags:
        - Transaction
      description: Gets details of existing transactions related to a given order.
      operationId: getTransactionsByReference
      summary: Gets details of existing transactions related to a given order
  '/v1/transaction/{transaction_reference}':
    get:
      parameters:
        - description: The unique identifier of the transaction.
          example: '800000420435'
          in: path
          name: transaction_reference
          required: true
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
          description: Transaction retrieved successfully.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: The request was rejected due to a validation error.
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: An authentication error occurred/invalid credentials.
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Access to this resource is fordidden.
      security:
        - basicAuth: []
      tags:
        - Transaction
      description: Gets details of existing transactions based on a transaction ID.
      operationId: getTransactionByReference
      summary: Gets details of existing transactions based on a transaction ID
  /v2/available-payment-products:
    get:
      parameters:
        - description: |-
            **This parameter is specific to SEPA Direct Debit as well as credit or
            debit card payment products.**

            Electronic Commerce Indicator (ECI).

            The ECI indicates the security level at which the payment information is processed between the cardholder and merchant.

            ### Credit or debit card

            If the payment product is a credit or debit card:

            - `1`: MO/TO (Mail Order/Telephone Order)
            - `2`: MO/TO – Recurring
            - `7`: E-commerce with SSL/TLS Encryption
            - `9`: Recurring E-commerce

            A default ECI value can be set in the preferences page. An ECI value sent along in the transaction will overwrite the default ECI value.

            ### SEPA Direct Debit

            If the payment product is SEPA Direct Debit:
            - `7`: First transaction/one-shot transaction
            - `9`: Recurring transaction
          in: query
          name: eci
          schema:
            example: 7
            default: 7
            enum:
              - 1
              - 2
              - 7
              - 9
              - 10
            type: string
        - in: query
          name: payment_product
          description: |-
            Available payment products.

            - `visa`, `mastercard`, `maestro`, `cb`, `3xcb`, `3xcb-no-fees`, `4xcb`, `4xcb-no-fees`, `american-express`, `bank-transfer`, `bcmc`, `bcmc-mobile`, `cbc-online`, `dexia-directnet`, `giropay`, `ideal`, `ing-homepay`, `kbc-online`, `klarnainvoice`, `paypal`, `paysafecard`, `payulatam`, `przelewy24`, `qiwi-wallet`, `sdd`, `sisal`, `sofort-uberweisung`, `yandex`, `aura`, `boleto-bancario`, `oxxo`
          schema:
            type: string
            example: "visa, american-express"
        - description: |-
            Available categories of payment products.
            
            - `credit-card`, `debit-card`, `realtime-banking` , `ewallet`
          in: query
          name: payment_product_category
          schema:
            enum:
              - credit-card
              - debit-card
              - realtime-banking
              - ewallet
            type: string
            example: credit-card
        - description: ' The country code of the customer. This two-letter country code complies with ISO 3166-1 (alpha 2).'
          in: query
          name: customer_country
          schema:
            example: FR
            default: FR
            enum:
              - AF
              - AL
              - DZ
              - AS
              - AD
              - AO
              - AI
              - AQ
              - AG
              - AR
              - AM
              - AW
              - AC
              - AU
              - AT
              - AZ
              - BS
              - BH
              - BD
              - BB
              - BY
              - BE
              - BZ
              - BJ
              - BM
              - BT
              - BO
              - BA
              - BW
              - BR
              - IO
              - VG
              - BN
              - BG
              - BF
              - BI
              - KH
              - CM
              - CA
              - IC
              - CV
              - BQ
              - KY
              - CF
              - EA
              - TD
              - CL
              - CN
              - CX
              - CC
              - CO
              - KM
              - CG
              - CD
              - CK
              - CR
              - HR
              - CU
              - CW
              - CY
              - CZ
              - CI
              - DK
              - DG
              - DJ
              - DM
              - DO
              - EC
              - EG
              - SV
              - GQ
              - ER
              - EE
              - ET
              - FK
              - FO
              - FJ
              - FI
              - FR
              - GF
              - PF
              - TF
              - GA
              - GM
              - GE
              - DE
              - GH
              - GI
              - GR
              - GL
              - GD
              - GP
              - GU
              - GT
              - GG
              - GN
              - GW
              - GY
              - HT
              - HN
              - HK
              - HU
              - IS
              - IN
              - ID
              - IR
              - IQ
              - IE
              - IM
              - IL
              - IT
              - JM
              - JP
              - JE
              - JO
              - KZ
              - KE
              - KI
              - XK
              - KW
              - KG
              - LA
              - LV
              - LB
              - LS
              - LR
              - LY
              - LI
              - LT
              - LU
              - MO
              - MK
              - MG
              - MW
              - MY
              - MV
              - ML
              - MT
              - MH
              - MQ
              - MR
              - MU
              - YT
              - MX
              - FM
              - MD
              - MC
              - MN
              - ME
              - MS
              - MA
              - MZ
              - MM
              - NA
              - NR
              - NP
              - NL
              - NC
              - NZ
              - NI
              - NE
              - NG
              - NU
              - NF
              - KP
              - MP
              - 'NO'
              - OM
              - PK
              - PW
              - PS
              - PA
              - PG
              - PY
              - PE
              - PH
              - PN
              - PL
              - PT
              - PR
              - QA
              - RO
              - RU
              - RW
              - RE
              - WS
              - SM
              - SA
              - SN
              - RS
              - SC
              - SL
              - SG
              - SX
              - SK
              - SI
              - SB
              - SO
              - ZA
              - GS
              - KR
              - SS
              - ES
              - LK
              - BL
              - SH
              - KN
              - LC
              - MF
              - PM
              - VC
              - SD
              - SR
              - SJ
              - SZ
              - SE
              - CH
              - SY
              - ST
              - TW
              - TJ
              - TZ
              - TH
              - TL
              - TG
              - TK
              - TO
              - TT
              - TA
              - TN
              - TR
              - TM
              - TC
              - TV
              - UM
              - VI
              - UG
              - UA
              - AE
              - GB
              - US
              - UY
              - UZ
              - VU
              - VA
              - VE
              - VN
              - WF
              - EH
              - YE
              - ZM
              - ZW
              - AX
            type: string
        - description: |-
            Base currency for this order. This three-character currency code
            complies with ISO 4217.
          in: query
          name: currency
          schema:
            example: EUR
            default: EUR
            enum:
              - AFN
              - AFA
              - ALL
              - ALK
              - DZD
              - ADP
              - AOA
              - AOK
              - AON
              - AOR
              - ARA
              - ARS
              - ARM
              - ARP
              - ARL
              - AMD
              - AWG
              - AUD
              - ATS
              - AZN
              - AZM
              - BSD
              - BHD
              - BDT
              - BBD
              - BYN
              - BYB
              - BYR
              - BEF
              - BEC
              - BEL
              - BZD
              - BMD
              - BTN
              - BOB
              - BOL
              - BOV
              - BOP
              - BAM
              - BAD
              - BAN
              - BWP
              - BRC
              - BRZ
              - BRE
              - BRR
              - BRN
              - BRB
              - BRL
              - GBP
              - BND
              - BGL
              - BGN
              - BGO
              - BGM
              - BUK
              - BIF
              - XPF
              - KHR
              - CAD
              - CVE
              - KYD
              - XAF
              - CLE
              - CLP
              - CLF
              - CNX
              - CNY
              - CNH
              - COP
              - COU
              - KMF
              - CDF
              - CRC
              - HRD
              - HRK
              - CUC
              - CUP
              - CYP
              - CZK
              - CSK
              - DKK
              - DJF
              - DOP
              - NLG
              - XCD
              - DDM
              - ECS
              - ECV
              - EGP
              - GQE
              - ERN
              - EEK
              - ETB
              - EUR
              - XEU
              - FKP
              - FJD
              - FIM
              - FRF
              - XFO
              - XFU
              - GMD
              - GEK
              - GEL
              - DEM
              - GHS
              - GHC
              - GIP
              - GRD
              - GTQ
              - GWP
              - GNF
              - GNS
              - GYD
              - HTG
              - HNL
              - HKD
              - HUF
              - ISK
              - ISJ
              - INR
              - IDR
              - IRR
              - IQD
              - IEP
              - ILS
              - ILP
              - ILR
              - ITL
              - JMD
              - JPY
              - JOD
              - KZT
              - KES
              - KWD
              - KGS
              - LAK
              - LVL
              - LVR
              - LBP
              - LSL
              - LRD
              - LYD
              - LTL
              - LTT
              - LUL
              - LUC
              - LUF
              - MOP
              - MKD
              - MKN
              - MGA
              - MGF
              - MWK
              - MYR
              - MVR
              - MVP
              - MLF
              - MTL
              - MTP
              - MRU
              - MRO
              - MUR
              - MXV
              - MXN
              - MXP
              - MDC
              - MDL
              - MCF
              - MNT
              - MAD
              - MAF
              - MZE
              - MZN
              - MZM
              - MMK
              - NAD
              - NPR
              - ANG
              - TWD
              - NZD
              - NIO
              - NIC
              - NGN
              - KPW
              - NOK
              - OMR
              - PKR
              - PAB
              - PGK
              - PYG
              - PEI
              - PEN
              - PES
              - PHP
              - PLN
              - PLZ
              - PTE
              - GWE
              - QAR
              - XRE
              - RHD
              - RON
              - ROL
              - RUB
              - RUR
              - RWF
              - SVC
              - WST
              - SAR
              - RSD
              - CSD
              - SCR
              - SLL
              - SGD
              - SKK
              - SIT
              - SBD
              - SOS
              - ZAR
              - ZAL
              - KRH
              - KRW
              - KRO
              - SSP
              - SUR
              - ESP
              - ESA
              - ESB
              - LKR
              - SHP
              - SDD
              - SDG
              - SDP
              - SRD
              - SRG
              - SZL
              - SEK
              - CHF
              - SYP
              - STN
              - STD
              - TJR
              - TJS
              - TZS
              - THB
              - TPE
              - TOP
              - TTD
              - TND
              - TRY
              - TRL
              - TMT
              - TMM
              - USD
              - USN
              - USS
              - UGX
              - UGS
              - UAH
              - UAK
              - AED
              - UYU
              - UYP
              - UYI
              - UZS
              - VUV
              - VEF
              - VEB
              - VND
              - VNN
              - CHE
              - CHW
              - XOF
              - YDD
              - YER
              - YUN
              - YUD
              - YUM
              - YUR
              - ZRN
              - ZRZ
              - ZMW
              - ZMK
              - ZWD
              - ZWR
              - ZWL
            type: string
        - in: query
          name: payment_terminal
          schema:
            type: string
        - in: query
          name: initialize_payment_terminal
          schema:
            type: string
        - in: query
          name: operation
          schema:
            type: string
        - in: query
          name: acquirer_registration_id
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.AvailablePaymentProductBundle.Response.AvailablePaymentProduct.AvailablePaymentProduct
          description: OK
        '400':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Internal Server Error
      tags:
        - payment-products
      security:
        - basicAuth: []
      description: Returns the list of all available payment products for the merchant.
      operationId: get_available-payment-products
  /v2/security-settings:
    get:
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.SecuritySettingBundle.Response.SecuritySetting.SecuritySetting
          description: Hash algorithm successfully returned
        '400':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Bad Request
        '403':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Forbidden
        '500':
          content:
            application/json:
              schema:
                $ref: |-
                  #/components/schemas/Hipay.Gateway.CommonBundle.Response.CommonError
          description: Internal Server Error
      tags:
        - security-settings
      security:
        - basicAuth: []
      description: Returns the list of all hash algorithms.
      operationId: get_security-settings
components:
  schemas:
    Common:
      description: Common model
      properties:
        accept_url:
          x-sort: 21
          description: |-
            The URL to return your customer to once the payment process is
            completed successfully.
            
            For more information about the user
            redirection workflow, check the [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#redirect-pages).
          example: 'https://developer.hipay.com/simulator/success/'
          type: string
        amount:
          x-sort: 15
          description: |-
            Total order amount, calculated as the sum of purchased items, plus
            shipping fees (if present), plus tax fees (if present).
          example: 125.75
          minimum: 1
          type: double
        cancel_url:
          x-sort: 25
          description: |-
            The URL to return your customer to after a system failure.
            
            For more information about the user redirection workflow, check the
            [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#redirect-pages).
          example: 'https://developer.hipay.com/simulator/cancel/'
          type: string
        cid:
          x-sort: 19
          description: Merchant's customer id. For fraud detection reasons.
          example: '283749291'
          type: string
        currency:
          x-sort: 14
          example: EUR
          description: |-
            Base currency for this order. This three-character currency code
            complies with ISO 4217.
          enum:
            - AED
            - AFN
            - ALL
            - AMD
            - ANG
            - AOA
            - ARS
            - AUD
            - AWG
            - AZN
            - BAM
            - BBD
            - BDT
            - BGN
            - BHD
            - BIF
            - BMD
            - BND
            - BOB
            - BRL
            - BSD
            - BTN
            - BWP
            - BYR
            - BZD
            - CAD
            - CDF
            - CHF
            - CLP
            - CNY
            - COP
            - CRC
            - CUC
            - CUP
            - CVE
            - CZK
            - DJF
            - DKK
            - DOP
            - DZD
            - EGP
            - ERN
            - ETB
            - EUR
            - FJD
            - FKP
            - GBP
            - GEL
            - GGP
            - GHS
            - GIP
            - GMD
            - GNF
            - GTQ
            - GYD
            - HKD
            - HNL
            - HRK
            - HTG
            - HUF
            - IDR
            - ILS
            - IMP
            - INR
            - IQD
            - IRR
            - ISK
            - JEP
            - JMD
            - JOD
            - JPY
            - KES
            - KGS
            - KHR
            - KMF
            - KPW
            - KRW
            - KWD
            - KYD
            - KZT
            - LAK
            - LBP
            - LKR
            - LRD
            - LSL
            - LYD
            - MAD
            - MDL
            - MGA
            - MKD
            - MMK
            - MNT
            - MOP
            - MRO
            - MUR
            - MVR
            - MWK
            - MXN
            - MYR
            - MZN
            - NAD
            - NGN
            - NIO
            - NOK
            - NPR
            - NZD
            - OMR
            - PAB
            - PEN
            - PGK
            - PHP
            - PKR
            - PLN
            - PYG
            - QAR
            - RON
            - RSD
            - RUB
            - RWF
            - SAR
            - SBD
            - SCR
            - SDG
            - SEK
            - SGD
            - SHP
            - SLL
            - SOS
            - SPL
            - SRD
            - STD
            - SVC
            - SYP
            - SZL
            - THB
            - TJS
            - TMT
            - TND
            - TOP
            - TRY
            - TTD
            - TVD
            - TWD
            - TZS
            - UAH
            - UGX
            - USD
            - UYU
            - UZS
            - VEF
            - VND
            - VUV
            - WST
            - XAF
            - XCD
            - XDR
            - XOF
            - XPF
            - YER
            - ZAR
            - ZMW
            - ZWD
          type: string
        custom_data:
          x-sort: 30
          description: |-
            Custom data. You can use these parameters to submit custom values
            you wish to show in HiPay back office transaction details, receive
            back in the API response messages, in the notifications or to
            activate specific FPS rules.
            
            Please note that `cdata` have been deprecated. If you are still using them,
            they can’t be combined with custom data. We thus recommend migrating to
            custom data as soon as possible.
          example: ''
          type: string
        decline_url:
          x-sort: 22
          description: |-
            The URL to return your customer to after the acquirer declines the
            payment.
            
            For more information about the user redirection
            workflow, check the [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#redirect-pages).
          example: 'https://developer.hipay.com/simulator/decline/'
          type: string
        description:
          x-sort: 12
          description: The order short description.
          example: A super short description here.
          type: string
        eci:
          x-sort: 3
          default: '7'
          description: |-
            **This parameter is specific to SEPA Direct Debit as well as credit
            or debit card payment products.**

            Electronic Commerce Indicator (ECI).

            The ECI indicates the security level at which the payment information is processed between the cardholder and merchant.

            ### Credit or debit card

            If the payment product is a credit or debit card:

            - `1`: MO/TO (Mail Order/Telephone Order)
            - `2`: MO/TO – Recurring
            - `7`: E-commerce with SSL/TLS Encryption
            - `9`: Recurring E-commerce

            A default ECI value can be set in the preferences page. An ECI value sent along in the transaction will overwrite the default ECI value.

            ### SEPA Direct Debit

            If the payment product is SEPA Direct Debit:
            - `7`: First transaction/one-shot transaction
            - `9`: Recurring transaction
          enum:
            - '1'
            - '2'
            - '7'
            - '9'
            - '10'
          example: 7
          type: string
        exception_url:
          x-sort: 24
          description: |-
            The URL to return your customer to after a system failure.
            
            For more information about the user redirection workflow, check the
            [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#redirect-pages).
          example: 'https://developer.hipay.com/simulator/exception/'
          type: string
        http_accept:
          x-sort: 27
          description: |-
            This element should contain the exact content of the HTTP `Accept`
            header as sent to the merchant from the customer's browser.
          example: '*\/*'
          type: string
        http_user_agent:
          x-sort: 28
          description: |-
            This element should contain the exact content of the HTTP `User-Agent`
            header as sent to the merchant from the customer's browser.
          example: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0)
          type: string
        ipaddr:
          x-sort: 20
          description: The IP address of your customer making a purchase.
          example: 127.0.0.1
          type: string
        language:
          x-sort: 29
          description: |-
            Locale code of your customer. This will be used to display payment
            page in correct language.
          example: en_GB
          type: string
        long_description:
          x-sort: 13
          description: |-
            Additional order description. You can show this description in HiPay
            payment page if desired.
          example: A super long description here...
          type: string
        notify_url:
          x-sort: 26
          description: |-
            This field allows you to override the notification URL, available in the configuration in the HiPay back office,
            with the URL of your choice that will process the notification sent by the HiPay platform.
          example: 'https://developer.hipay.com/simulator/notify/'
          type: string
        operation:
          x-sort: 2
          default: Authorization
          description: |-
            Transaction type:
              - **`Sale`** indicates that the transaction is automatically submitted for capture.
              - **`Authorization`** indicates that this transaction is sent for authorization only.
          enum:
            - Authorization
            - Sale
          example: Authorization
          type: string
        orderid:
          x-sort: 1
          x-uniqId: true
          description: Unique order ID.
          example: ORDER_1537532589263
          type: string
        pending_url:
          x-sort: 23
          description: |-
            The URL to return your customer to when the payment request was
            submitted to the acquirer but response is not yet available.
            
            For more information about the user redirection workflow, check the
            [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#redirect-pages).
          example: 'https://developer.hipay.com/simulator/pending/'
          type: string
        shipping:
          x-sort: 16
          description: |-
            The order shipping fee. It can be omitted if the shipping fee value
            is zero.
          example: 1.3
          type: double
        tax:
          x-sort: 17
          description: The order tax fee. It can be omitted if the order tax value is zero.
          example: 1.1
          type: double
        tax_rate:
          x-sort: 18
          description: The order tax rate.
          example: 1
          type: double
      title: Common
      type: object
    Error:
      description: Error model
      properties:
        code:
          description: Code
          type: integer
        description:
          description: Description
          type: string
        message:
          description: Message
          type: string
      title: Error
      type: object
    Forward:
      description: Forward model
      properties:
        forwardUrl:
          description: ''
          example: |-
            https://stage-secure-gateway.hipay-tpp.com/payment/web/pay/df4d20da-7b6f-4fed-8603-c4ed3dca48
          type: string
        mid:
          description: ''
          example: 00001326589
          type: string
        order:
          $ref: '#/components/schemas/OrderResponse'
      title: Forward
      type: object
    InputOrder:
      allOf:
        - $ref: '#/components/schemas/Common'
        - $ref: '#/components/schemas/Order'
      description: InputOrder model
      properties:
        authentication_indicator:
          x-sort: 4
          default: '0'
          description: |-
            **This parameter is specific to SEPA Direct Debit as well as credit or debit card payment products.**

            ### Credit or debit card

            If the payment product is a credit or debit card, this parameter indicates if the 3-D Secure authentication should be performed for this transaction.

            - `0`: Bypass 3-D Secure authentication.

            - `1`: 3-D Secure authentication if available.

            - `2`: 3-D Secure authentication mandatory.

            For more information about the 3-D Secure workflow, check the [HiPay Enterprise Overview](/getting-started/platform-hipay-enterprise/overview/#3-d-secure-integration).

            ### SEPA Direct Debit

            If the payment product is SEPA Direct Debit, this parameter indicates if the debit agreement (mandate) must be electronically signed or not.

            - `0`: Bypass electronic signature.

            - `1`: Ask for electronic signature.

            For more information about the SEPA Direct Debit integration (including examples), check the [HiPay Enterprise Overview](/getting-started/platform-hipay-enterprise/overview/#sepa-direct-debit-sdd).
          enum:
            - '0'
            - '1'
            - '2'
          example: 0
          type: string
        bank_name:
          description: |-
            **This parameter is specific to the SEPA Direct Debit payment product.**
            
            Issuer Bank Name.
          example: BNP
          type: string
        cardtoken:
          x-sort: 53
          description: |-
            **This parameter is specific to credit or debit card payment products.**
            
            This is the token obtained from the HiPay Enterprise Secure Vault API when tokenizing a credit or debit card. To generate a token, please refer to the HiPay Enterprise Tokenization API documentation.
          example: f39bfab2b6c96fa30dcc0e55aa3da4125a49ab03
          type: string
        carrier_description:
          x-sort: 62
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**
            
            Carrier description.
          example: La Poste, 27 Rue des Francs Bourgeois
          type: string
        debit_agreement_id:
          x-sort: 63
          description: |-
            **This parameter is specific to the SEPA Direct Debit payment product.**

            If this is a recurring payment, this parameter provides the agreement ID (mandate) returned on first transaction.
          type: integer
        delivery_date:
          x-sort: 60
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**
            
            Estimated delivery date. Format is YYYY-MM-DD.
          example: '2022-12-20'
          type: string
        delivery_method:
          x-sort: 61
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**`
            
            The delivery method.
          enum:
            - CARRIER
            - STORE24H
            - CARRIER24H
            - RELAYPOINT
          example: CARRIER
          type: string
        device_fingerprint:
          x-sort: 28
          description: |-
            This element should contain the value of the 'ioBB' hidden field.
            
            For more information about the device fingerprint integration, check the [HiPay Enterprise
            Overview](/getting-started/platform-hipay-enterprise/overview/#device-fingerprint-integration).
          example: 042q0aAXOogFCkNMNf94lis1ztsdwpJAn3AFS6wesUIr2q
          type: string
        iban:
          x-sort: 65
          description: |-
            **This parameter is specific to the SEPA Direct Debit payment product.**
            
            International Bank Account Number (IBAN).
          example: FR1420041010050500013M02606
          type: string
        issuer_bank_id:
          x-sort: 54
          description: |-
            **This parameter is specific to the iDEAL and the SEPA Direct Debit payment products.**
            
            This is the Business Identifier Code (BIC) of the customer's issuer bank.
          example: BNPAFRPPXXX
          type: string
        order_category_code:
          x-sort: 59
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**
            
            The order category code.

            Please refer to the following list:

            | Code | Description |
            | --- | --- |
            | 5499 | Alimentation & gastronomie 
            | 5571 | Auto & moto
            | 7929 | Culture & divertissements 
            | 5261 | Maison & jardin
            | 5200 | Electroménager
            | 7278 | Enchères et achats groupés
            | 5193 | Fleurs & cadeaux
            | 5734 | Informatique & logiciels 
            | 7298 | Santé & beauté
            | 0 | Services aux particuliers 
            | 7361 | Services aux professionnels 
            | 5941 | Sport
            | 5651 | Vêtements & accessoires 
            | 4722 | Voyage & tourisme
            | 5946 | Hifi, photo & vidéos
            | 4812 | Téléphonie & communication
          enum:
            - '5499'
            - '5571'
            - '7929'
            - '5261'
            - '5200'
            - '7278'
            - '5193'
            - '5734'
            - '7298'
            - '0'
            - '7361'
            - '5941'
            - '5651'
            - '4722'
            - '5946'
            - '4812'
          example: '5941'
          type: integer
        payment_product:
          x-sort: 5
          description: |-
            The payment method used to proceed checkout. Depending on the
            payment product, parameters specific to the payment method are
            required. The list of payment products to display on the payment
            page.
          enum:
            - visa
            - mastercard
            - maestro
            - cb
            - 3xcb
            - 3xcb-no-fees
            - 4xcb
            - 4xcb-no-fees
            - american-express
            - bank-transfer
            - bcmc
            - bcmc-mobile
            - cbc-online
            - dexia-directnet
            - giropay
            - ideal
            - ing-homepay
            - kbc-online
            - klarnainvoice
            - paypal
            - paysafecard
            - payulatam
            - przelewy24
            - qiwi-wallet
            - sdd
            - sisal
            - sofort-uberweisung
            - yandex
            - aura
            - boleto-bancario
            - oxxo
          example: visa
          type: string
        qiwiuser:
          x-sort: 55
          description: |-
            **This parameter is specific to the Qiwi Wallet payment product.**
            
            The Qiwi user's ID, to whom the invoice is issued. It is the user's phone number, in international format.
          example: '33670985712'
          type: string
        recurring_payment:
          x-sort: 64
          default: '0'
          description: |-
            **This parameter is specific to the SEPA Direct Debit payment product.**

            Indicates if the debit agreement will be created for a single-use or a multi-use.
      
            Possible values:

            - `0`: Generate a single-use agreement id.
            - `1`: Generate a multi-use agreement id.
          enum:
            - '0'
            - '1'
          example: '0'
          type: string
        shipto_gender:
          x-sort: 56
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**

            Gender of the recipient:

            - `M`: male
            - `F`: female
            - `U`: unknown
          example: U
          type: string
        shipto_msisdn:
          x-sort: 58
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**
            
            The customer's ship-to mobile phone number.
          example: '33112345678'
          type: string
        shipto_phone:
          x-sort: 57
          description: |-
            **This parameter is specific to the 3x and 4x Carte Bancaire payment products.**
            
            The customer's ship-to phone number.
          example: '33112345678'
          type: string
      required:
        - orderid
        - operation
        - payment_product
        - description
        - currency
        - amount
        - accept_url
        - decline_url
        - pending_url
        - exception_url
        - cancel_url
        - firstname
        - lastname
        - eci
      title: InputOrder
      type: object
    Operation:
      description: Operation model
      properties:
        authorizationCode:
          description: ''
          example: author
          type: string
        authorizedAmount:
          description: ''
          example: '125.85'
          type: string
        capturedAmount:
          description: ''
          example: '125.85'
          type: string
        currency:
          description: ''
          example: EUR
          type: string
        dateAuthorized:
          description: ''
          example: '2019-02-07T10:07:09+0000'
          type: string
        dateCreated:
          description: ''
          example: '2019-02-07T10:07:09+0000'
          type: string
        dateUpdated:
          description: ''
          example: '2019-02-07T10:07:09+0000'
          type: string
        message:
          description: ''
          example: Captured
          type: string
        mid:
          description: ''
          example: 00001326589
          type: string
        operation:
          description: The operation to perform on the transaction.
          enum:
            - capture
            - refund
            - cancel
            - acceptChallenge
            - denyChallenge
          example: capture
          type: string
        refundedAmount:
          description: ''
          example: '0.00'
          type: string
        status:
          description: ''
          example: '118'
          type: string
      title: Operation
      type: object
    Order:
      description: Order model
      properties:
        birthdate:
          x-sort: 33
          description: Birth date of the customer (YYYYMMDD). For fraud detection reasons.
          example: '19880612'
          type: string
        city:
          x-sort: 40
          description: The customer's city.
          example: Paris
          type: string
        country:
          x-sort: 43
          description: The zip or postal code of the customer.
          example: FR
          type: string
        email:
          x-sort: 31
          description: The customer's e-mail address.
          example: john.doe@foobar99.com
          type: string
        firstname:
          x-sort: 35
          description: |-
            The customer's first name. This value will be use to pre-fill
            cardholder name on credit card payment form.
          example: Cathy
          type: string
        gender:
          x-sort: 34
          description: |-
            Gender of the customer:

            - `M`: male
            - `F`: female
            - `U`: unknown
          enum:
            - U
            - F
            - M
          example: U
          type: string
        lastname:
          x-sort: 36
          description: |-
            The customer's last name. This value will be use to pre-fill
            cardholder name on credit card payment form.
          example: Doe
          type: string
        phone:
          x-sort: 32
          description: The customer's phone number.
          example: '330123456789'
          type: string
        recipientinfo:
          x-sort: 37
          description: |-
            Additional information about the customer (e.g., quality or
            function, company name, department, etc.).
          example: Dr.
          type: string
        shipto_city:
          x-sort: 49
          description: The city to which the order is to be shipped.
          example: Paris
          type: string
        shipto_country:
          x-sort: 52
          description: |-
            Country code to which the order is being shipped. This two-letter
            country code complies with ISO 3166-1 (alpha 2).
          example: FR
          type: string
        shipto_firstname:
          x-sort: 44
          description: The first name of the order recipient.
          example: Cathy
          type: string
        shipto_lastname:
          x-sort: 45
          description: The last name of the order recipient.
          example: Doe
          type: string
        shipto_recipientinfo:
          x-sort: 46
          description: |-
            Additional information about the order recipient (e.g., quality or
            function, company name, department, etc.).
          example: Dr.
          type: string
        shipto_state:
          x-sort: 50
          description: |-
            The USA state or Canada state to which the order is being shipped.
            Send this information only if the shipping country is US (USA) or CA
            (Canada).
          type: string
        shipto_streetaddress:
          x-sort: 47
          description: Street address to which the order is to be shipped.
          example: 101 Rue de Rivoli
          type: string
        shipto_streetaddress2:
          x-sort: 48
          description: |-
            The additional information about address to which the order is to be
            shipped (e.g., building, floor, flat, etc.).
          example: Immeuble B
          type: string
        shipto_zipcode:
          x-sort: 51
          description: The zip or postal code to which the order is being shipped.
          example: '75001'
          type: string
        state:
          x-sort: 41
          description: |-
            The USA state or the Canada state of the customer making the
            purchase. Send this information only if the address country of the
            customer is US (USA) or CA (Canada).
          type: string
        streetaddress:
          x-sort: 38
          description: Street address of the customer.
          example: 101 Rue de Rivoli
          type: string
        streetaddress2:
          x-sort: 39
          description: |-
            Additional address information of the customer (e.g., building,
            floor, flat, etc.).
          example: Immeuble B
          type: string
        zipcode:
          x-sort: 42
          description: The zip or postal code of the customer.
          example: '75001'
          type: string
      title: Order
      type: object
    OrderResponse:
      description: Order Response model
      properties:
        amount:
          description: ''
          example: '125.75'
          type: string
        attempts:
          description: ''
          example: '0'
          type: string
        currency:
          description: ''
          example: EUR
          type: string
        customerId:
          description: ''
          example: '283749291'
          type: string
        dateCreated:
          description: ''
          example: '2019-02-07T13:57:08+0000'
          type: string
        decimals:
          description: ''
          example: '2'
          type: string
        email:
          description: ''
          example: john.doe@foobar99.com
          type: string
        id:
          description: ''
          example: '1549547828947'
          type: string
        language:
          description: ''
          example: en_GB
          type: string
        shipping:
          description: ''
          example: '0'
          type: string
        tax:
          description: ''
          example: '1.10'
          type: string
      title: Order Response
      type: object
    ThreeDSecure:
      description: ThreeDSecure model
      properties:
        authenticationMessage:
          description: ''
          example: ''
          type: string
        authenticationStatus:
          description: ''
          example: ''
          type: string
        authenticationToken:
          description: ''
          example: ''
          type: string
        eci:
          description: ''
          example: '6'
          type: string
        enrollmentMessage:
          description: ''
          example: Cardholder Not Enrolled
          type: string
        enrollmentStatus:
          description: ''
          example: 'N'
          type: string
        xid:
          description: ''
          example: ''
          type: string
      title: ThreeDSecure
      type: object
    Transaction:
      allOf:
        - $ref: '#/components/schemas/OrderResponse'
        - properties:
            attemptId:
              description: Attempt identifier.
              example: '1'
              type: integer
            capturedAmount:
              description: Captured amount.
              example: '125.75'
              type: string
            creditedAmount:
              description: Total credited.
              type: string
            dateUpdated:
              description: |-
                Date of last status change.

                This date must comply with ISO 8601.
              type: string
            debitAgreement:
              $ref: '#/components/schemas/debitAgreement'
            deviceId:
              description: ''
              type: string
            eci:
              description: |-
                Electronic Commerce Indicator (ECI).


                The Electronic Commerce Indicator (ECI) is used by
                acquirers/issuers

                to determine the type of transaction being processed. The ECI
                value

                should represent the source of the transaction request. That is,
                the

                environment that the cardholder used to provide the payment card
                details

                to the merchant. It is important that merchants set the correct
                ECI

                value during transaction processing to ensure that appropriate
                merchant

                service rates are received.
              example: '7'
              type: integer
            forwardUrl:
              description: URL of the page on which to redirect the customer.
              type: string
            fraudScreening:
              $ref: '#/components/schemas/fraud'
            message:
              type: string
            mid:
              description: |-
                Merchant id (MID).

                Unique identifier assigned to the merchant.
              type: integer
            paymentMethod:
              $ref: '#/components/schemas/paymentMethod'
            paymentProduct:
              description: The payment product used for processing current transaction.
              example: visa
              type: string
            reason:
              $ref: '#/components/schemas/reason'
            referenceToPay:
              description: Reference to pay.
              type: string
            refundedAmount:
              description: Refunded amount.
              example: 00.00
              type: string
            state:
              description: Transaction state.
              type: string
            status:
              description: Transaction status.
              example: completed
              type: integer
            transactionReference:
              description: Unique Transaction Identifier.
              example: '800000790677'
              type: string
      description: Transaction model
      properties:
        authorizationCode:
          description: ''
          example: author
          type: string
        authorizedAmount:
          description: ''
          example: '125.85'
          type: string
        avsResult:
          description: ''
          type: string
        currency:
          description: ''
          example: EUR
          type: string
        cvcResult:
          description: ''
          type: string
        dateAuthorized:
          description: ''
          example: '2019-02-07T10:07:09+0000'
          type: string
        dateCreated:
          description: ''
          example: '2019-02-07T10:07:09+0000'
          type: string
        ipAddress:
          description: ''
          example: 0.0.0.0
          type: string
        ipCountry:
          description: ''
          example: 0.0.0.0
          type: string
        threeDSecure:
          $ref: '#/components/schemas/ThreeDSecure'
      title: Transaction
      type: object
    debitAgreement:
      description: Debit Agreement model
      properties:
        id:
          type: string
        status:
          type: string
      title: Debit Agreement
      type: object
    fraud:
      description: Fraud screening model
      properties:
        result:
          description: ''
          example: ACCEPTED
          type: string
        review:
          description: ''
          example: ''
          type: string
        scoring:
          description: ''
          example: '0'
          type: string
      title: Fraud screening
      type: object
    hpayment:
      allOf:
        - $ref: '#/components/schemas/Common'
        - $ref: '#/components/schemas/Order'
      description: HPayment model
      properties:
        authentication_indicator:
          x-sort: 4
          default: '0'
          description: |-
            Indicates if the 3-D Secure authentication should be performed for this transaction.

            - `0`: Bypass 3-D Secure authentication.

            - `1`: 3-D Secure authentication if available.

            - `2`: 3-D Secure authentication mandatory.

            For more information about the 3-D Secure workflow, check the [HiPay Enterprise Overview](/getting-started/platform-hipay-enterprise/overview/#3-d-secure-integration).
          enum:
            - '0'
            - '1'
            - '2'
          example: 0
          type: string
        css:
          x-sort: 7
          description: URL to merchant style sheet. **HTTPS protocol is required.**
          example: 'https://developer.hipay.com/misc/simulator/css-responsive.css'
          type: string
        display_selector:
          x-sort: 10
          description: |-
            Enable/disable the payment products selector. Possible values:

            - `0`: the selector is not displayed
            - `1`: the selector is displayed
          enum:
            - 0
            - 1
          example: '1'
          type: integer
        merchant_display_name:
          x-sort: 9
          description: |-
            The merchant name displayed on payment page, otherwise the name is
            retrieved from order.
          example: ACME Consolidated
          type: string
        multi_use:
          x-sort: 11
          description: |-
            Indicates the tokenization module whether the payment card token
            should be generated either for a single-use or a multi-use. Possible values:

            - `1`: Generates a multi-use token
            - `0`: Generates a single-use token. While a single-use token is typically generated for a short time and for processing a single transaction, multi-use tokens are generally generated for reccuring payments.
          enum:
            - 0
            - 1
          example: '0'
          type: integer
        payment_product_category_list:
          x-sort: 6
          default: credit-card
          description: |-
            The categories of payment products to be displayed on the payment page.
            
            - `credit-card`, `debit-card`, `realtime-banking`, `ewallet`
          enum:
            - credit-card
            - debit-card
            - realtime-banking
            - ewallet
          example: credit-card
          type: string
        payment_product_list:
          x-sort: 5
          description: |-
            The list of payment products to display on the payment page.

            - `visa`, `mastercard`, `maestro`, `cb`, `3xcb`, `3xcb-no-fees`, `4xcb`, `4xcb-no-fees`, `american-express`, `bank-transfer`, `bcmc`, `bcmc-mobile`, `cbc-online`, `dexia-directnet`, `giropay`, `ideal`, `ing-homepay`, `kbc-online`, `klarnainvoice`, `paypal`, `paysafecard`, `payulatam`, `przelewy24`, `qiwi-wallet`, `sdd`, `sisal`, `sofort-uberweisung`, `yandex`, `aura`, `boleto-bancario`, `oxxo`
          example: "mastercard, cb, visa"
          type: string
        template:
          x-sort: 8
          description: |-
            The template name. Possible values:

            - `basic-js` for a full page redirection
            - `iframe-js` for an iframe integration
          enum:
            - basic-js
            - iframe-js
          example: basic-js
          type: string
        time_limit_to_pay:
          description: |-
            The time limit to pay allows you to specify the validity period of a
            payment page in seconds starting from the moment the payment link
            (forwardUrl) is generated. If empty, default value is fixed to 7
            days. Max value: 24 days (2140000 seconds).
          example: '1800'
          type: string
      required:
        - orderid
        - operation
        - description
        - currency
        - amount
        - accept_url
        - decline_url
        - pending_url
        - exception_url
        - cancel_url
        - firstname
        - lastname
        - eci
      title: HPayment
      type: object
    maintenance:
      description: Maintenance model
      properties:
        amount:
          description: |-
            Amount is required for partial maintenances. Do not specify amount
            for full captures or refunds.
          example: '3.5'
          type: string
        operation:
          x-sort: 1
          description: The operation to perform on the transaction.
          enum:
            - capture
            - refund
            - cancel
            - acceptChallenge
            - denyChallenge
          example: capture
          type: string
        operation_id:
          description: |-
            Operation merchant ID. This value will be returned to merchant with
            the notifications related to this operation.
          example: 204OJ23LKJ234
          type: string
      required:
        - operation
      title: Maintenance
      type: object
    paymentMethod:
      description: Payment model
      properties:
        brand:
          description: ''
          type: string
        cardExpiryMonth:
          description: ''
          type: string
        cardExpiryYear:
          description: ''
          type: string
        cardHolder:
          description: ''
          type: string
        country:
          description: The country code where payment method was issued.
          type: string
        issuer:
          description: |-
            Name of the financial institution that
            issued the payment method.
          type: string
        pan:
          description: ''
          type: string
        token:
          description: ''
          type: string
      title: Payment
      type: object
    reason:
      description: Reason model
      properties:
        code:
          description: ''
          type: string
        message:
          description: ''
          type: string
      title: Reason
      type: object
    Hipay.Gateway.AvailablePaymentProductBundle.Response.AvailablePaymentProduct.AvailablePaymentProduct:
      description: AvailablePaymentProduct model
      properties:
        code:
          description: Code
          type: string
        customer_description:
          description: Customer Description
          type: string
        description:
          description: Description
          type: string
        id:
          description: Id
          type: string
        payment_product_category_code:
          description: Payment Product Category Code
          type: string
        tokenizable:
          description: Tokenizable
          type: boolean
      type: object
      title: AvailablePaymentProduct
    Hipay.Gateway.CommonBundle.Response.CommonError:
      description: Common Error model
      properties:
        code:
          description: Code
          format: int32
          type: integer
        description:
          description: Description
          type: string
        message:
          description: Message
          type: string
      type: object
      title: CommonError
    Hipay.Gateway.SecuritySettingBundle.Response.SecuritySetting.SecuritySetting:
      description: SecuritySetting model
      properties:
        hashing_algorithm:
          description: Hashing Algorithm
          type: string
      type: object
      title: SecuritySetting
  securitySchemes:
    basicAuth:
      scheme: basic
      type: http
externalDocs:
  description: Find out more about HiPay
  url: 'https://developer.hipay.com/'
